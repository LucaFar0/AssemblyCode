compilazione
	as --32 -o hello.o hello.s
	ld -m elf_i386 -o hello hello.o
	./hello

Stampa a monitor
	movl $4, %eax	      # Set system call WRITE
	movl $1, %ebx	      # | <- standard output (video)
	leal str, %ecx        # | <- destination
	movl str_l, %edx      # | <- length
	int $0x80             # Execute syscall

Lettura da tastiera
	movl $3, %eax         # Set system call READ
	movl $0, %ebx         # | <- keyboard
	leal str, %ecx        # | <- destination
	movl str_l, %edx      
	incl %edx			  # | <- string length + 1	
	int $0x80             # Execute syscall

Exit - termino il programma
	movl $1, %eax
	movl $0, %ebx
	int $0x80
	
Set variabile (8 bit)(char[INDEX])
	leal VARIABILE, %esi
	

	#nelle divisioni, se op è un byte(8bit)
	#	dividendo in AX
	#	quoziente in AL
	#	resto in AH
	#nelle divisioni, se op è una world(16bit)
	#	dividendo in DX e AX concatenati
	#	quoziente in EAX
	#	resto in EDX
	#nelle divisioni, se op è un long
	#	dividendo in EDX e EAX concatenati (32 bit)
	#	quoziente in EAX
	#	resto in EDX
	
	
	movl $10, %ebx
	divb %bl
	addb $48, %ah			# convertola prima cifra in ascii
	movb %ah, INDEX(%esi)	# metti in ESI+INDEX ah
	xorb %ah, %ah
	

if
	movl x, %eax
	movl y, %ebx
	cmp %eax, %ebx
	jl isless
		# block 2 (blocco else)
		jmp after
	isless:
		# block 1 (blocco then)
	after:
	# block 3 (fuori da if)

for(i = 10; i < 0; i--)
	movl i, %ecx
	start:
		#ciclo
	loop start:
	#fine ciclo
	
	
	

